// Generated by Haxe
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = function() { };
App.__name__ = true;
App.update = function(time) {
	window.requestAnimationFrame(App.update);
	App.analyser.getByteFrequencyData(App.freqs);
	App.analyser.getByteTimeDomainData(App.times);
	if(App.dirtySpectrum) {
		App.ctx.clearRect(0,0,App.canvas.width,App.canvas.height);
		App.ctx.fillStyle = "#313131";
		var barWidth = App.canvas.width / App.analyser.frequencyBinCount;
		var _g1 = 0;
		var _g = App.analyser.frequencyBinCount;
		while(_g1 < _g) {
			var i = _g1++;
			var height = App.canvas.height * (App.freqs[i] / 256);
			var offset = App.canvas.height - height - 1;
			App.ctx.fillStyle = "hsl(" + i / App.analyser.frequencyBinCount * 60 + ", 100%, 50%)";
			App.ctx.fillRect(i * barWidth | 0,offset,barWidth,height);
		}
		var _g11 = 0;
		var _g2 = App.analyser.frequencyBinCount;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var offset1 = App.canvas.height - App.canvas.height * (App.times[i1] / 256) - 1;
			App.ctx.fillStyle = "white";
			App.ctx.fillRect(i1 * barWidth | 0,offset1,1,2);
		}
		App.dirtySpectrum = false;
	}
};
App.handleWindowResize = function(e) {
	App.canvas.width = window.innerWidth;
	App.canvas.height = window.innerHeight;
};
App.main = function() {
	window.onload = function() {
		App.canvas = window.document.getElementById("spectrum");
		App.canvas.style.backgroundColor = "#000";
		App.canvas.width = window.innerWidth;
		App.canvas.height = window.innerHeight;
		App.ctx = App.canvas.getContext("2d",null);
		App.ctx.strokeStyle = "#fff";
		App.ctx.fillStyle = "#fff";
		App.audio = new AudioContext();
		var gain = App.audio.createGain();
		gain.gain.value = 0.5;
		gain.connect(App.audio.destination);
		App.analyser = App.audio.createAnalyser();
		App.analyser.smoothingTimeConstant = 0.8;
		App.analyser.fftSize = 512;
		App.analyser.connect(gain);
		App.freqs = new Uint8Array(App.analyser.frequencyBinCount);
		App.times = new Uint8Array(App.analyser.frequencyBinCount);
		var noiseBufferSize = 4096;
		var whiteNoise = App.audio.createScriptProcessor(noiseBufferSize,1,1);
		whiteNoise.onaudioprocess = function(e) {
			om_audio_generator_Noise.generateWhiteNoise(e.outputBuffer.getChannelData(0),noiseBufferSize);
			App.dirtySpectrum = true;
		};
		var brownNoise = App.audio.createScriptProcessor(noiseBufferSize,1,1);
		brownNoise.onaudioprocess = function(e1) {
			om_audio_generator_Noise.generateBrownNoise(e1.outputBuffer.getChannelData(0),noiseBufferSize);
			App.dirtySpectrum = true;
		};
		var pinkNoise = App.audio.createScriptProcessor(noiseBufferSize,1,1);
		pinkNoise.onaudioprocess = function(e2) {
			om_audio_generator_Noise.generatePinkNoise(e2.outputBuffer.getChannelData(0),noiseBufferSize);
			App.dirtySpectrum = true;
		};
		var _g = new haxe_ds_StringMap();
		if(__map_reserved.white != null) {
			_g.setReserved("white",whiteNoise);
		} else {
			_g.h["white"] = whiteNoise;
		}
		if(__map_reserved.pink != null) {
			_g.setReserved("pink",pinkNoise);
		} else {
			_g.h["pink"] = pinkNoise;
		}
		if(__map_reserved.brown != null) {
			_g.setReserved("brown",brownNoise);
		} else {
			_g.h["brown"] = brownNoise;
		}
		var noises = _g;
		var noiseTypes = ["white","brown","pink"];
		var _g1 = 0;
		while(_g1 < noiseTypes.length) {
			var type = [noiseTypes[_g1]];
			++_g1;
			var e3 = [window.document.getElementById(type[0])];
			e3[0].style.textDecoration = "line-through";
			e3[0].onclick = (function(e4,type1) {
				return function() {
					if(e4[0].style.textDecoration == "none") {
						e4[0].style.textDecoration = "line-through";
						(__map_reserved[type1[0]] != null?noises.getReserved(type1[0]):noises.h[type1[0]]).disconnect();
					} else {
						e4[0].style.textDecoration = "none";
						(__map_reserved[type1[0]] != null?noises.getReserved(type1[0]):noises.h[type1[0]]).connect(App.analyser);
					}
				};
			})(e3,type);
		}
		window.addEventListener("resize",App.handleWindowResize,false);
		window.requestAnimationFrame(App.update);
	};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0?-f:f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var om_audio_generator_Noise = function() { };
om_audio_generator_Noise.__name__ = true;
om_audio_generator_Noise.generateWhiteNoise = function(buf,size) {
	if(size == null) {
		size = 4096;
	}
	var _g1 = 0;
	while(_g1 < size) buf[_g1++] = Math.random() * 2 - 1;
};
om_audio_generator_Noise.generatePinkNoise = function(buf,size) {
	if(size == null) {
		size = 4096;
	}
	var b0;
	var b1;
	var b2;
	var b3;
	var b4;
	var b5;
	var b6 = 0.0;
	b5 = 0.0;
	b4 = 0.0;
	b3 = 0.0;
	b2 = 0.0;
	b1 = 0.0;
	b0 = 0.0;
	var _g1 = 0;
	while(_g1 < size) {
		var i = _g1++;
		var white = Math.random() * 2 - 1;
		b0 = 0.99886 * b0 + white * 0.0555179;
		b1 = 0.99332 * b1 + white * 0.0750759;
		b2 = 0.96900 * b2 + white * 0.1538520;
		b3 = 0.86650 * b3 + white * 0.3104856;
		b4 = 0.55000 * b4 + white * 0.5329522;
		b5 = -0.7616 * b5 - white * 0.0168980;
		buf[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
		buf[i] *= 0.11;
		b6 = white * 0.115926;
	}
};
om_audio_generator_Noise.generateBrownNoise = function(buf,size) {
	if(size == null) {
		size = 4096;
	}
	var last = 0.0;
	var _g1 = 0;
	while(_g1 < size) {
		var i = _g1++;
		buf[i] = (last + 0.02 * (Math.random() * 2 - 1)) / 1.02;
		last = buf[i];
		buf[i] *= 3.5;
	}
};
om_audio_generator_Noise.createWhiteNoiseNode = function(audio,size) {
	return om_audio_generator_Noise.createNode(audio,size,om_audio_generator_Noise.generateWhiteNoise);
};
om_audio_generator_Noise.createPinkNoiseNode = function(audio,size) {
	return om_audio_generator_Noise.createNode(audio,size,om_audio_generator_Noise.generatePinkNoise);
};
om_audio_generator_Noise.createBrownNoiseNode = function(audio,size) {
	return om_audio_generator_Noise.createNode(audio,size,om_audio_generator_Noise.generateBrownNoise);
};
om_audio_generator_Noise.createNode = function(audio,size,process) {
	var n = audio.createScriptProcessor(size,1,1);
	n.onaudioprocess = function(e) {
		process(e.outputBuffer.getChannelData(0),size);
	};
	return n;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
App.FFT_SIZE = 512;
App.SMOOTHING = 0.8;
App.dirtySpectrum = false;
js_Boot.__toStr = { }.toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
App.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=app.js.map